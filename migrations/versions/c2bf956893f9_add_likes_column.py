"""Add likes column

Revision ID: c2bf956893f9
Revises: 
Create Date: 2025-06-27 23:16:13.901138

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c2bf956893f9'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users')
    with op.batch_alter_table('book', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('book_isbn_idx'))

    op.drop_table('book')
    op.drop_table('_sqlx_migrations')
    with op.batch_alter_table('posts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('likes', sa.Integer(), server_default='0', nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('posts', schema=None) as batch_op:
        batch_op.drop_column('likes')

    op.create_table('_sqlx_migrations',
    sa.Column('version', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('installed_on', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('checksum', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('execution_time', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('version', name=op.f('_sqlx_migrations_pkey'))
    )
    op.create_table('book',
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('isbn', sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    with op.batch_alter_table('book', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('book_isbn_idx'), ['isbn'], unique=True)

    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('users_pkey'))
    )
    # ### end Alembic commands ###
